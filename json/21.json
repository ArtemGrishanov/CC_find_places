{"Id":0,"Title":"Поиск городов","TeacherId":"","LessonPart":[{"LessonNumber":1,"Title":"Постановка задачи","Type":"","Tags":"","Tech":"","Experience":"1","DescriptionText":"","Comment":"","Description":[{"Id":0,"PageNumber":1,"Content":"<author role=\"manager\">\nОдному нашему клиенту надо сделать показ городов на карте. Пользователь вводит текст, на карте показывается найденный город.\nВот макет дизайна <a href=\"/images/screenshot.jpg\">Скачать</a>\n<img width=\"300px\" src=\"/images/screenshot.jpg\"/>\nТвой наставник поможет тебе, если потребуется.\nКстати говоря, поиск городов на английском языке.\n</author>"},{"Id":0,"PageNumber":2,"Content":"<author role=\"mentor\">\nПривет друг, я твой наставник в этом проекте. Мы уже, кажется, встречались.\nСо мной ты сможешь связаться по скайпу и задать интересующие вопросы skype:artemgishanov\n</author>"},{"Id":0,"PageNumber":3,"Content":"Для улучшение качества курсов, заполни пожалуйста, анкету. Это займет примерно 1-ну минуту. <a href=\"https://docs.google.com/forms/d/1B4PHWuKajA7Fwjd9Q-wr3yTy8uEcaHjJQyK1uwgWp2o/viewform\" target=\"_blank\">Анкета</a>\n\nПосле того заполнишь, можем двигаться дальше."}],"Tutorial":[{"PageNumber":1,"Content":""}],"Job":[{"PageNumber":1,"Content":""}]},{"LessonNumber":3,"Title":"Настройка","Type":"","Tags":"","Tech":"","Experience":"1","DescriptionText":"","Comment":"","Description":[{"PageNumber":1,"Content":"Будет хорошо, если ты уже умеешь использовать <code>git</code> для хранения кода проекта. Если еще нет, что ж, ничего страшного, приступай к работе.\n\nТебе потребуется:\n- Chrome\n- Chrome Development Tools\n- Git (опционально)\n\nВообщем создай новый проект, в нем index.html и все такое прочее."}],"Tutorial":[{"PageNumber":1,"Content":"<h3>Chrome Development Tools</h3>\nChrome Development Tools (cdt) - это отличный инструмент разработчика, который позволяет просматривать исходный код html-страницы, скриптов и стилей.\nКроме того вы можете менять код станицы и стили \"на лету\" и видеть все изменения. Совершенно обычным является редактирование стилей прямо в cdt, добиваясь нужного результата, а затем перенести их в свой проект.\nДля открытия cdt следует нажать правой кнопкой в любое место страницы и выбрать \"Проверить элемент\" (Inspect Element).\n<h4>Elements</h4>\nВ разделе Elements видно DOM-дерево страницы, а также стили с правой стороны.\nДействия производимые в отладчике, конечно, затрагивают только вашу локальную html-страницу, которую загрузил браузер.\n<h4>Network</h4>\nВ этом разделе видны все входящие и исходящие запросы из браузера: html, картинки, скрипты, шрифты, ajax и так далее.\n<h4>Console</h4>\nКонсоль является мощным средством отладки javascript. Позволяет получить доступ к программному контексту страницы, выполнять все функции, добавлять новые объекты - по-сути программировать прямо в открывшейся странице.\nАналогчиные инструменты разработчика существую почти во всех веб-браузерах."}],"Job":[{"PageNumber":1,"Content":"Подготовь все эти инструменты, создай каталог для проекта и перейдем к следующему разделу."}]},{"LessonNumber":4,"Title":"Откуда брать информацию по городам?","Type":"","Tags":"javascript[20], html[4], ajax[5]","Tech":"","Experience":"26","DescriptionText":"","Comment":"Надо загрузить файл cities.txt куда то к нам на сервер.\nКуда то на api.compilisto.com/find_places/cities.txt","Description":[{"Id":0,"PageNumber":1,"Content":"Нам предстоит достаточно работы перед тем как мы займемся версткой и интерфейсом пользователя.\nВо-первых, нам нужны данные по городам. Какой город и где находится, иначе говоря координаты: широта и долгота.\nСписок доступных городов вот он по ссылке\n<a href=\"https://dl.dropboxusercontent.com/u/56885863/cities.txt\">https://dl.dropboxusercontent.com/u/56885863/cities.txt</a>\n\nТебе потребуется:\n- XMLHttpRequest\n- Javascript Functions\n- Arrays\n- Object\n- Array Split\n- Javascript 'For'\n- Chrome Development Tools\n- parseInt\n- script"},{"Id":0,"PageNumber":2,"Content":"Обрати внимание на формат файла. Открой его в любом текстовом редакторе. Думаю, тут все понятно. Название города, широта, долгота и регион."}],"Tutorial":[{"Id":0,"PageNumber":1,"Content":"<h3>Functions</h3>\nФункции javascript представляют собой последовательность действий, выполняемых последовательно. Функция начинается со слова function, затем следует наименование, далее в круглых скобках задаются параметры, если они требуются. После этого, в фигурных скобках задается сама последовательность, выполняемая функцией.\n<listing>\nfunction showMessage()\n{\nalert(\"Функция вызвана\");\n}\n</listing>\nЭта простая функция не имеет параметров, и выдает заложенное в нее сообщение. Если мы хотим выдавать различные сообщения, то переписать функцию можно так:\n<listing>\nfunction showMessage(msg)\n{\nalert(msg);\n}\n</listing>\n\nКак же можно запустить выполнение этой функции? У элементов html существуют встроенные события, по сути представляющие из себя моменты, в которые с этим элементом что-то происходит. Например, навели курсор - событие, потерялся фокус - событие, кликнули на кнопку - событие. Эта удобная система позволяет задать с помощью вызова функций javascript, когда и что делать. Вот так можно вызвать функцию в нашем примере, передав ей текст для сообщения, используя событие onclick, происходящее при клике на элементе:\n<listing>\n..........\n<html>\n<head>\n<title></title>\n<script>\nfunction showMessage(msg)\n{\nalert(msg);\n}\n\n</script>\n</head>\n<body>\n<input type=\"button\" value=\"Нажми\" onclick=\"showMessage('Кнопка нажата')\" / >\n</body>\n</html>\n</listing>\n\nФункции могут выдавать какой-либо итог своей деятельности, это называется \"возвращать значение\". К примеру, следующая функция просто умножает\nпереданные ей числа, и передает их к месту вызова. Для этого используется ключевое слово return:\n<listing>\nfunction proisvedenie(number1, number2)\n{\nvar s = number1 * number2;\nreturn  s;\n}\n</listing>\n\nФункции javascript должны находится между тегами <code><script></code>. Этих тегов может быть сколько угодно на странице. Хотя положение их не регламентируется, обычно приоритетные скрипты,  которые должны быть загружены в первую очередь, подключают в заголовке документа. Сегодня, как правило, код выносится во внешний файл, и присоединяются к документу в требуемом месте c помощью того же тега <code><script></code> и его атрибута src. Кроме того, в спецификациях html до 5 версии требуется обязательное задание атрибута type:\n\n<listing>\n..........\n<head>\n<title></title>\n\n<script type=\"text/javascript\" src=\"scripts.js\"></script>\n</head>\n...........\n</listing>\n\nСам файл можно создать в обычном блокноте, задав расширение .js. Внутри никакой специальной разметки и тегов не требуется."},{"Id":0,"PageNumber":2,"Content":"<h3>Arrays</h3>\nОбъект javascript Array представляет собой массив пронумерованных элементов. Создать массив можно двумя вариантами:\n1) var a = new Array('Железо', 'Пластик', 'Дерево'), пустой массив var empty = new Array(),  массив заданной длины var a = new Array(10).\n2) var a = ['Железо', 'Пластик', 'Дерево'], пустой массив var empty = [].\n\nОтсчет элементов начинается с нуля. Это следует учитывать при работе с массивом. Рассмотрим основные приемы работы с массивом:\n<listing>\n// создаем массив с тремя элементами\nvar a = [\"ежик\", \"медвежонок\", \"лошадка\"];\n// получим значение первого элемента массива\nvar elem1 = a[0]; // ежик\n//добавим новый элемент в конец массива\na.push('речка'); // получаем  [\"ежик\", \"медвежонок\", \"лошадка\", \"речка\"];\n// добавим элемент в начало массива\na.unshift('луг');  получаем  [\"луг\", \"ежик\", \"медвежонок\", \"лошадка\", \"речка\"];\n// удаляем первый элемент с начала\na.shift(); // получаем  [ \"ежик\", \"медвежонок\", \"лошадка\", \"речка\"];\n// удаляем первый элемент с конца\na.pop(); // получаем [ \"ежик\", \"медвежонок\", \"лошадка\"];\n</listing>\n\nБолее верно будет сказать, что команды shift() и pop() не удаляют элементы, а изымают их. То есть если мы запишем, например, не a.shift(), а var elem1 = a.shift(), то значение \"луг\"  примет переменная elem1. На массив a[] это изменение в коде никак не повлияет.\n\nОсобо стоит сказать о свойстве <code>length</code>. В данном случае, когда все индексы устанавливались автоматически, и в нумерации нет разрывов, можно\nсказать, что, выполнив\n<listing>\nvar h = a.length;\n</listing>\nмы получим в переменной h длину массива, или количество элементов массива. Но на самом деле команда вычисляет максимальный ключ массива плюс единица.\nВ данном случае максимальный ключ массива  a[\"ежик\", \"медвежонок\", \"лошадка\"] - это 2 (напоминаем, индекс первого элемента соответствует нулю). Поэтому\nколичество элементов равно a.length. Но, если мы пропишем ключ вручную:\n<listing>\na[80] = \"сова\";\nvar h = a.length;\n</listing>\nто в переменной h окажется значение 81, то есть максимальный ключ 80 + 1. \n\nПеребор массива (для не прерывающихся индексов):\n<listing>\nfor(var i = 0; i < a.length; i++)\n{\nvar value = a[i];\n}\n</listing>"},{"Id":0,"PageNumber":3,"Content":"<h3>Objects</h3>\nОбъекты в JavaScript отличаются от объектов в прочих языках. Они представляют собой ассоциативные массивы, то есть пары \"ключ-значение\". Создать объект можно, использовав синтаксис:\n<listing>\nvar game = { name: 'borderlands', date: 2012 };\n</listing>\nДалее, если мы хотим узнать, например, сколько лет назад она вышла, то это можно сделать, обратившись к свойству объекта:\n<listing>\nvar game = { name: 'borderlands', date: 2012 };\nvar currentYear = 2015;\nvar dataStart = game.date;\nvar delta = currentYear - dataStart;\ndocument.write(\"Выпуск игры состоялся \" + delta.toString() + \" лет назад\");\n</listing>\nТак же просто можно добавить новое свойство и присвоить ему значение:\n<listing>\ngame.genre = 'shooter, rpg';\n</listing>\nСуществует и иной способ обращения к свойствам объекта - через использование квадратных скобок. \nvar g = game['genre'];\nЭтот способ удобно использовать в том случае, если мы не знаем, значение какого именно свойства предстоит получать, оно передается в переменной. Вы не сможете импользовать что то вроде\n<listing>\nvar feat = 'genre';\nvar g = game. + feat;\n</listing>\nА вот при использовании квадратных скобок все нормально:\n<listing>\nvar feat = 'genre';\nvar g = game[feat];\n</listing>"},{"Id":0,"PageNumber":4,"Content":"<h3>For</h3>\nДанный оператор организовывает цикл заданное количество раз. Пример:\n<listing>\nfor(var i = 1; i < 6; i++)\n{\n//Какие-то нужные действия\n}\n</listing>\nПо порядку:\nvar i = 1  -  этой записью мы назначаем ответственного за цикл. Переменная i содержит в себе номер текущего круга. То есть в первом i будет равна единице, во втором i будет равна двум и далее. В принципе, мы можем начать с любого числа, не обязательно единицы. Это можно использовать, например, в номере строки;\ni < 6 - это - условие выполнения цикла. Иными словами, пока i меньше шести цикл будет повторяться. В этом примере цикл выполнится 5 раз. Если надо выполнить его 6 раз, то можно сформулировать условие как i <= 6, или же i < 7.  \nДо сих пор мы обходили вопрос, как же происходит смена номера цикла переменной i? Как раз это выполняет запись  i++. Это более короткий вариант записи i = i + 1/ Таким образом, при каждом цикле значение переменной повышается на единицу;\nРассмотрим более реальный пример. Цикл в javascript используется в основном для перебора массивов, или строк по-символьно. В этих объектах первый элемент\nимеет номер 0, а не 1. Перепишем пример:\n<listing>\nvar t = [\"Первый элемент\", \"Второй элемент\", \"Третий элемент\"];\nfor(var i = 0; i < 3 ; i++)\n{\n// Получим значение элемента массива\nvar y = t[i];\n//Какие-то нужные действия\n}\n</listing>\nТаким образом, мы последовательно получим каждое значение элементов массива.\nДополнительно: в реальной ситуации количество элементов массива или длина строки почти никогда не известны. В этом случае узнать ее можно с помощью оператора length. Соответственно, запись примет вид:\n<listing>\nvar t =  [\"Первый элемент\", \"Второй элемент\", \"Третий элемент\"]; \nfor(var i = 0; i < t.length ; i++)\n{\n//Какие-то нужные действия\n}\n</listing>"},{"Id":0,"PageNumber":5,"Content":"<h3>Split</h3>\nОчень полезный метод, позволяющий одной строчкой получить массив из строки, разделенный на значение каким-нибудь оговоренным символом. Часто для этого используется запятая, точка с запятой, двоеточие.\nДопустим, стоит задача узнать, какой сезон записан третьим.\n<listing>\nvar seasons = \"зима, весна, лето, \"осень\";\nvar aSeasons = seasons.split(',');\n// получим  [\"зима\", \"весна\", \"лето\", \"осень\"]\n// теперь просто получаем значение третьего элемента. Не забываем, что первый элемент массива имеет нулевой номер \nvar s = aSeasons[2];\n// сообщим итог\nalert(s);\n</listing>\nПри больших строках и известном положении нужного значения в массиве количество элементов можно ограничить. Например, в строке более сотни фамилий, но искомая точно находится в первом десятке. Тогда можно оптимизировать метод, задав: \n<listing>\nvar list = fullList.split(',',10);\n</listing>\nТеперь массив состоит всего из 10 элементов"},{"Id":0,"PageNumber":6,"Content":"<h3>parseInt</h3>\nФункция javascript <code>parseInt</code> пытается преобразовать заданную строку в числовое значение. Это особенно актуально для получения символа из строки и дальнейшей работы с ним как с числом. Например, запись\n<listing>\ndocument.write(\"15\" + 10);\n</listing>\nвыведет на страницу 1510. А вот \n<listing>\ndocument.write(parseInt(\"15\") + 10);\n</listing>\nуже выведет 25."},{"Id":0,"PageNumber":7,"Content":"<h3>XMLHttpRequest</h3>\nЭто объект javascript, который получает данные по URL. Таким образом, вы можете получить данные без перезагрузки страницы. Применение его чрезвычайно широко: вы можете обновить часть документа, загрузить данные из какого-либо файла, работать с апи сторонних сервисов.\nНазвание объекта немного сбивает с толку: на самом деле XMLHttpRequest может загружать не только XML данные. Тема использования этого объекта довольно обширна, сейчас мы рассмотрим наиболее типовой сценарий его использования:\n<listing>\nfunction onReady() {\nif (xmlhttp.readyState==4 && xmlhttp.status==200) {\n//Сделать что-то полезное со свойством xmlhttp.responseText\n...\n}\n}\n...\nvar xmlhttp = new XMLHttpRequest();\nxmlhttp.onreadystatechange = onReady;\nxmlhttp.open(\"GET\", 'https://dl.dropboxusercontent.com/u/56885863/cities.txt');\nxmlhttp.send();\n</listing>\nВ результате выполнения этого кода в свойстве xmlhttp.responseText окажется содержимое txt-файла. Функцию же onReady мы задаем в качестве обработчика события на изменения состояния объекта <code>XMLHttpRequest</code>"}],"Job":[{"Id":0,"PageNumber":1,"Content":"Первым шагом добавь в конец <code>body</code> тег <code><script></code> а в нем функцию <code>loadCities()</code>, которая будет отвечать за загрузку городов.\nПусть <code>loadCities()</code> автоматически вызывается при загрузке страницы.\nПоместив вызов функцию таким образом, ты будешь уверен, что она начинает работать после загрузки всего html-документа."},{"Id":0,"PageNumber":2,"Content":"Реализуй типичный запрос с помощью XMLHttpRequest.\nСсылка на файл с городами может выглядеть например так:\nxmlhttp.open(\"GET\", 'https://dl.dropboxusercontent.com/u/56885863/cities.txt);"},{"Id":0,"PageNumber":3,"Content":"В результате в свойстве <code>responseText</code> должна оказаться строка, то есть содержимое файла cities.txt\nЭто всего лишь строка, нам еще предстоит извлечь из нее информацию."},{"Id":0,"PageNumber":4,"Content":"Объяви переменную cities (массив), в которой будут собраны объекты-города."},{"Id":0,"PageNumber":5,"Content":"В обработке ответа сначала следует разбить текст на строки, примерно так:\n<listing>\nvar lines = xmlhttp.responseText.split('\\n');\n</listing>\nПотом сделать цикл <code>for</code> по всем <code>lines</code> и сделать <code>split</code> строки по символу '#'. Из полученных данных сформировать объект и запихать его в массив."},{"Id":0,"PageNumber":6,"Content":"В результате в консоли <code>CDT</code> при вводе <code>cities</code>, вы должны увидеть массив <code>cities</code> длиной 23461 элемент\n<img src=\"/images/cities_in_console.jpg\"/>"},{"Id":0,"PageNumber":7,"Content":"<author role=\"mentor\">\nОтлично. Теперь у тебя есть данные по городам, с которыми можно работать.\nЕсли не получилось, пиши задавай вопросы.\nНадеюсь ты помнишь, что можешь получить советы по практике, связавшись со мной  skype:artemgishanov\n</author>"}]},{"LessonNumber":5,"Title":"Начинаем делать UI","Type":"","Tags":"html[12], css[6]","Tech":"","Experience":"18","DescriptionText":"","Comment":"","Description":[{"Id":0,"PageNumber":1,"Content":"Создадим базовый интерфейс пользователя согласно макету. Постараемся сделать, чтобы можно было что-то вводить и нажимать.\n\nТебе понадобится:\n- html forms\n- html input\n- html select\n- css position"},{"Id":0,"PageNumber":2,"Content":"Вот карта. Она представляет собой цилиндрическую проекцию земного шара.\n<img width=\"400px\" src=\"/images/map_950.png\"/>\n<a href=\"/images/map_950.png\">Скачать</a>\nНа таком типе карт легко будет переводить графические координаты в экранные."}],"Tutorial":[{"Id":0,"PageNumber":1,"Content":"<h3>form</h3>\nТег form предназначен для создания форм ввода для пользователя с такими компонентами как input, textarea, select, option и другие.\nТакже этот тег имеет встроенный функционал для отправки на сервер. Тег <code><form></code> - это своего рода \"паровозик\", отвозящий данные на сервер. Предположим, на странице есть два текстовых поля для ввода пароля и логина. Для того, чтобы сервер проверил их на правильность, эти поля должны быть помещены внутри тега <code><form></code>, и отправлены на сервер для проверки. \nНачнем построение страницы с формой.\n<listing>\n<form>\n<input type=\"text\" name=\"login\" value=\"Введите логин\" />\n<input type=\"password\" name=\"password\" value=\"Введите пароль\" />\n</form>\n</listing>\nОднако, паровозику надо знать, куда ехать. \"Адрес\" задается атрибутом action тега <code><form></code>, и представляет собой ссылку на страницу сервера, настроенную на обработку поступивших данных. А\nеще надо задать способ упаковки груза, иными словами, задать, как будет передаваться информация.  Для этого служит атрибут method, принимающий значение GET (по умолчанию), или POST. \nИ теперь нам нужно ответственное лицо, дающее старт. Этим \"лицом\" является кнопка  <code><input></code> с типом submit. \nДополняем пример:\n<listing>\n<form action=\"http://нужный адрес\" method=\"post\">\n<input type=\"text\" name=\"login\" value=\"Введите логин\" />\n<input type=\"password\" name=\"password\" value=\"Введите пароль\" />\n<input type=\"submit\" value=\"Отослать\" />\n</form>\n</listing>\nОтметим еще атрибут target: нередко в ответ на отосланные данные требуется как-то ответить. например, сообщить о несуществующем логине, некорректном адресе электронной почты, принятом заказе.\nВ этом случае сервер, в свою очередь, отсылает клиенту нужную информацию. Свойство target и задает идентификатор элемента, куда эту информацию загрузить."},{"Id":0,"PageNumber":2,"Content":"<h3>input</h3>\nОдин из базовых тегов html. Он создает поле формы (кнопку, текстовое поле, чекбокс и т.п.), содержание которой может быть изменено или активизировано пользователемю Поведение его напрямую зависит от атрибута type. Для начала приведем пример записи:\n<listing>\n<input name=\"city\" type=\"text\" placeholder=\"Введите название\" />\n</listing>\nКак вы заметили, закрывающий тег не требуется. Просто слеш в конце.\nЭтот код создать текстовое поле для ввода информации. льносительно новый атрибут placeholder задает текст подсказки, помещенной в поле. Он пропадает, как только пользователь начет вводить свою информацию. Прочие варианты:\nатрибута type:\n- button - создает кнопку;\n- password - создает поле для ввода пароля. от обычного отличается тем, что вводимый пароль заменяется \"звездочками\";\n- checkbox - создает \"галочку\", которую можно либо поставить, либо снять;\n- radio - создает поле ввода для случаев, когда надо выбрать один из нескольких готовых вариантов.\n- submit - создается кнопка, по нажатию на которую данные отсылаются на сервер. Имеет смысл при совместном употреблении с тегом <code><form></code>\n- hidden - это поле не показывается пользователю. Таким образом, в нем можно хранить какую-то внутреннюю информацию для скриптов. Однако, во встроенном отладчике браузеров эти данные видны, поэтому не стоит хранить в этом теге пароли и другую секретную информацию.\nЗдесь мы рассмотрим еще два важных атрибута. Атрибут name задает имя элемента. Именно по нему на сервере будет искаться информация, введенная пользователем. Кнопки radio должны иметь одинаковые имена в группе. Атрибут value задает текстовый заголовок для полей любого типа, в том числе и кнопок. Вот пример просто формы авторизации с использованием <code><input></code>:\n<listing>\n<form action=\"url адрес\" method=\"post\">\n<input type=\"text\" name=\"userLogin\" value=\"\" placeholder=\"Введите логин\" />\n<input type=\"password\" name=\"userPassword\"  placeholder=\"Введите пароль\"/>\n<input type=\"submit\" value=\"Войти\" /> \n</form>\n</listing>"},{"Id":0,"PageNumber":3,"Content":"<h3>select</h3>\nТег <code><select></code> позволяет создать список на странице, либо выпадающий список. Дочерний элемент, тег <code><option></code> создает отдельный элемент списка. Ширина списка определяется длиной наиболее длинной записи в <code><option></code>.\nПример:\n<listing>\n<select name=\"Materials\">\n<option>Железо</option>\n<option>Дерево</option>\n<option>Пластик</option>\n</select>\n</listing>\nАтрибут name используется при обращении к данным, если форма отсылается на сервер, или же скриптами. Из прочих атрибутов отметим disabled - блокирует доступ к элементу, size - количество строк списка, именно от него\nзависит вид элемента. Если size не задан, или равен единице, создается выпадаюший список, иначе - обычный список.\nЗдесь же стоит упомянуть про свойство value тега <code><option></code>. Выводимый в элементе текст не всегда удобен для работы с кодом, а значения, удобные компьютеру, не всегда воспринимаемы человеком. Value позволяет каждому работать с привычными критериями. \n<listing>\n<select name=\"Materials\">\n<option value=\"iron\">Железо</option>\n<option value=\"wood\">Дерево</option>\n<option value=\"plastic\">Пластик</option>\n</select>\n</listing>"},{"Id":0,"PageNumber":4,"Content":"<h3>position</h3>\nСвойство CSS задающее, как будет позиционироваться элемент относительно прочих элементов на странице. Синтаксис простой:\n<listing>\n<div style=\"position: relative;\">\nтекст\n</div>\n</listing>\n<code>fixed</code> - наиболее понятный тип позиционирования. Элемент прикрепляется к конкретному месту свойствами left, right, bottom, top, и больше никуда не двигается. При прокрутке положение также не меняется.\nЭтот эффект используется, например, для создания \"прилипающего\" навигационного меню ;\n<code>absolute</code> - тип позиционирования похож на fixed, но при этом еще учитывается тип позиционирования родительского элемента. В случае, если, к примеру, элемент-контейнер имеет значение позиционирования relative или absolute, то\nотсчет идет относительно родительского элемента.\n<code>relative</code> -  положение элемента устанавливается относительно его исходного места. Использование свойств left, top, right и bottom изменяет позицию элемента и сдвигает его в ту или иную сторону от первоначального положения. \n<code>inherit</code> - наследуется значение родительского элемента."}],"Job":[{"Id":0,"PageNumber":1,"Content":"Сформируй основную верстку: там должны быть по крайней мере два основных <code>div</code>: карта и блок с элементами ввода (<code>input</code>, <code>select</code> и кнопка)"},{"Id":0,"PageNumber":2,"Content":"Как можно заметить элементы ввода (контролы) накладываются поверх карты, какой прием для этого можно применить:\n<quiz>{\"type\": \"radiobutton\", \"tags\": \"\", \"question\": \"Что следует использовать для того, чтобы компоненты интерфейса оказались поверх карты?\", \"choice\": [\"float:left;\",\"position:absolute;\",\"display:inline-block;\"],\"answer\":\"1\", \"explanation\": \"Следует использовать position:absolute; чтобы вынести блок из основного html потока и расположить его как угодно. В данном случае поверх блока с картой.\"}</quiz>"},{"Id":0,"PageNumber":3,"Content":"Используй html-тег <code>form</code> с элементами ввода, чтобы сформировать интерфейс ввода.\nКнопку я бы сделал в отдельном диве ниже.\nНу и карту не забудь показать, это будет фон одного большого <code>div</code>"},{"Id":0,"PageNumber":4,"Content":"Более тонкой настройкой дизайна и красотой займемся в следующей задаче\nНадеюсь получилось, если что консультируйся."}]},{"LessonNumber":6,"Title":"Доводим UI до приемлемого вида","Type":"","Tags":"html[5],css[15]","Tech":"","Experience":"20","DescriptionText":"","Comment":"Код добавить - о чем речь.","Description":[{"PageNumber":1,"Content":"Выровняй элементы согласно по макету, это должно быть несложно.\nКстати, <code>select</code> надо по умолчанию скрыть, так как он будет отвечать за выбор альтернативного города.\n\nТебе потребуется\n- padding\n- margin\n- css position\n- left\n- top"}],"Tutorial":[{"Id":0,"PageNumber":1,"Content":"<h3>padding</h3>\n<code>padding</code> является как-бы зеркальным близнецом свойства <code>margin</code>. Если второй устанавливает внешние отступы от прочих элементов, то <code>padding</code> задает \"поля\" внутри блока. Например, вы заполняете каждую ячейку таблицы текстом. При этом тексты соседних ячеек соприкасаются, что и смотрится, и читается не очень хорошо. Чтобы создать отступы между краем ячейки и текстом и понадобится <code>padding</code>.  Зададим отступы в порядке сверху, справа, снизу, слева:\n<listing>\n<table>\n<tr>\n<td style=\"padding:15px 5px 0 10px;\">\nНесколько строчек текста Несколько строчек текста Несколько строчек текста Несколько строчек текста Несколько строчек текста\n</td>\n<td style=\"padding:15px 5px 0 10px;\">\nНесколько строчек текста Несколько строчек текста Несколько строчек текста Несколько строчек текста Несколько строчек текста\n</td>\n<tr>\n<table>\n</listing>\nВсе проще, если отступ должен быть одинаковый, тогда пишем просто\n<listing>\n<td style=\"padding:15px;\">\n</listing>\n Как и <code>margin</code>, тег можно записать полной формой.\n<listing>\n<td style=\"padding-top:15px; padding-right:5px; padding-bottom:0px; padding-left:10px;\">\n</listing>"},{"Id":0,"PageNumber":2,"Content":"<h3>margin</h3>\nmargin - очень важное составное свойство css. Оно задает отступы между элементами на странице. Чтобы вам было понятнее, сформулируем задачу: требуется установить у блока отступы сверху и слева по 50 пикселов. В этом случае можно использовать запись:\n<listing>\n<div style=\"margin-top 50px; margin-left:50px;\">Блок</div>\n</listing>\nЗадача выполнена! А теперь сделаем эту запись более лаконичной:\n<listing>\n<div style=\"margin:50px 0 0 50px;\">Блок</div>\n</listing>\nЕще проще, если со всех сторон нужны одинаковые отступы. Тогда запись будет еще короче:\n<listing>\n<div style=\"margin:50px;\">Блок</div>\n</listing>\nКак вы, наверно, уже поняли, свойство <code>margin</code> объединяет в себе 4 свойства, а именно <code>margin-top</code>, <code>margin-right</code>, <code>margin-left</code> и <code>margin-bottom</code>. Запись в виде\n<listing>\nmargin: 10px 20px 30px 40px;\n</listing>\nустанавливает соответствующие отступы сверху и по часовой стрелки, то есть 10 пикселов сверху, 20 справа, 30 снизу и 40 слева. Эта запись равнозначна последовательности:\n<listing>\nmargin-top:10px;\nmargin-right:20px;\nmargin-left:40px;\nmargin-bottom:30px;\n</listing>"},{"Id":0,"PageNumber":3,"Content":"<h3>position</h3>\nСвойство CSS задающее, как будет позиционироваться элемент относительно прочих элементов на странице. Синтаксис простой:\n<listing>\n<div style=\"position: relative;\">\nтекст\n</div>\n</listing>\n<code>fixed</code> - наиболее понятный тип позиционирования. Элемент прикрепляется к конкретному месту свойствами left, right, bottom, top, и больше никуда не двигается. При прокрутке положение также не меняется.\nЭтот эффект используется, например, для создания \"прилипающего\" навигационного меню ;\n<code>absolute</code> - тип позиционирования похож на fixed, но при этом еще учитывается тип позиционирования родительского элемента. В случае, если, к примеру, элемент-контейнер имеет значение позиционирования relative или absolute, то\nотсчет идет относительно родительского элемента.\n<code>relative</code> - положение элемента устанавливается относительно его исходного места. Использование свойств left, top, right и bottom изменяет позицию элемента и сдвигает его в ту или иную сторону от первоначального положения. \n<code>inherit</code> - наследуется значение родительского элемента."},{"Id":0,"PageNumber":4,"Content":"<h3>top</h3>\nСвойство css <code>top</code> задает расстояние от верхнего края родительского элемента до верхнего края дочернего. Отсчет координат зависит от значения свойства position. Если оно равно absolute, в качестве родителя выступает окно браузера, и положение элемента определяется от его верхнего края. В случае значения relative, отступ отсчитывается от верхнего края исходного положения элемента. Если для родительского элемента задано position: relative, то абсолютное позиционирование дочерних элементов определяет их положение от верхнего края родителя.\n<listing>\n<div style=\"position:relative; top: 100px;\">Блок с отступом</div>\n</listing>\nКроме пикселей, отступ можно задать любой единицей css - дюймами, пунктами, процентами. При использовании процентов отступ вычисляется относительно родительского элемента."},{"Id":0,"PageNumber":5,"Content":"<h3>left</h3>\nСвойство css <code>left</code> устанавливает отступ от левого края родительского элемента. Однако результат применения свойства зависит от значения свойста position, как самого элемента, так и его родителя. Например, если элемент имеет position: relative, то смещение происходит относительно его же первоначальной позиции. Если задано фиксированное позиционирование (position :fixed), то отсчет ведется от левого края браузера., независимо от наличия или отсутствия прочих элементов. Для position:static применение свойства <code>left</code> не даст никакого эффекта.\n<listing>\n<div style=\"left: 100px; position:fixed;\">Фиксированный блок</div>\n</listing>\nВ качестве единицы измерения могут выступать пикселы, пункты, дюймы. Особое значение с появлением адаптивной верстки приобрела возможность задавать отступы (и прочие величины)  в процентах. В этом случае пропорции сохраняются, что позволяет сайтам не \"ломаться\" при просмотрах на экранах мобильных устройств."}],"Job":[{"Id":0,"PageNumber":1,"Content":"Я бы сделал кнопку обычным <code>span</code> со стилями: <code>display:inline-block</code> фон, границы, настройки шрифта, ну и еще по мелочи"},{"Id":0,"PageNumber":2,"Content":"Используй <code>left</code> и <code>top</code> чтобы установить все элементы абсолютным позиционированием. Если надо используй <code>padding</code> и <code>margin</code>"}]},{"LessonNumber":7,"Title":"Начинаем искать","Type":"","Tags":"javascript[20], html[4], css[6]","Tech":"","Experience":"30","DescriptionText":"","Comment":"","Description":[{"Id":0,"PageNumber":1,"Content":"Описание задачи:\n- Ввести указатель pointer (будет указывать место на карте)\n- Реализовать функцию поиска <code>findCity(name)</code>, которая будет возвращать найденный объект из массива <code>cities</code>\n- Реализовать функцию перемещения указателя на точку на карте. Функция <code>show(latitude, longitude)</code>\n\nТебе понадобятся:\n- javascript variables\n- getElementById"},{"Id":0,"PageNumber":2,"Content":"Указатель - это тот самый элемент интерфейса, который показывает местоположение.\nДавай сделаем пока просто квадратный div размером 5х5 пикселей. Пока у нас нет красивого красного указателя как показано на макете, в дизайне."}],"Tutorial":[{"Id":0,"PageNumber":1,"Content":"<h3>Var</h3>\nПеременные представляют собой некие коробочки, содержащие некое содержимое - строку, число и прочее. Чтобы создать переменную в JavaScript, требуется использовать слово var и задать имя переменной:\n<listing>\nvar animal;\n</listing>\nТеперь можно записать в нее данные:\n<listing>\nanimal = 'cat';\n</listing>\nЗначение можно менять сколько угодно раз. Если мы продолжим, и запишем\n<listing>\nalert(animal);\nanimal = 'dog';\nalert(animal);\n</listing>\nто, соответственно, в первый раз выведется сообщение 'cat', а второй 'dog'.\nНесколько замечаний о переменных JavaScript:\n1) Наименование может состоять из  букв, цифр, и символов \"$\" и \"_\". Наименование не может начинаться с цифры.\n2) Русские символы допустимы, но не рекомендуются.\n3) JavaScript - регистро-зависимый язык, то есть переменные \"animal\" и \"Animal\" не одно и то же.\n4) Переменные имеют зоны видимости. Поясним на примере:\n<listing>\nvar globAnimal;\nglobAnimal = 'Elefant';\nfunction test()\n{\nvar locAnimal = 'Tiger';\nalert(globAnimal);\n}\nalert(locAnimal);\n</listing>\nКогда мы попросим вывести значение переменной \"globAnimal\" внутри функции \"test()\", то никаких неожиданностей не возникнет: переменная, объявленная вне функции, видна в любом месте, она называется глобальной. А вот при попытке вывести переменную \"locAnimal\" вне функции она будет не определена. Переменные, объявленные внутри функции, доступны только в ней, и не доступны за ее пределами. Добиться вывода значения 'Tiger' можно, к примеру, вот как:\n<listing>\nvar globAnimal;\nglobAnimal = 'Elefant';\nfunction test()\n{\nvar locAnimal = 'Tiger';\nglobAnimal = locAnimal; // но будьте внимательны - изначальное значение переменной  \"globAnimal\" будет затерто\n}\nalert(globAnimal);\n</listing>\nЭто обычный прием для того, чтобы хранить значения, требуемые для общей работы кода."},{"Id":0,"PageNumber":2,"Content":"<h3>getElementById</h3>\nСамый простой и однозначный способ получить элемент на странице - найти его по идентификатору. Для этого и служит функция <code>getElementById()</code>. Получив элемент, можно выполнить с ним самые разнообразные действия. Например, зададим цвет текста:\n<listing>\nvar myTextBlock = document.getElementById('idTextBlock');\nmyTextBlock.style.color = 'blue';\n</listing>\nЕсли на странице находится несколько элементов с одинаковым идентификатором, то действия производятся с первым из них."}],"Job":[{"Id":0,"PageNumber":1,"Content":"Css-класс указателя, конечно, должен задавать абсолютную позицию.\nДолжна появиться черная точка в левом верхнем углу карты.\nЭто будет предварительная настройка стилей.\n<img src=\"/images/pointer_1.png\"/>"},{"Id":0,"PageNumber":2,"Content":"У <code>div</code> указателя стоит задать атрибут <code>id</code>, для доступа к нему из javascript.\nМы будем двигать его программно из javascript кода."},{"Id":0,"PageNumber":3,"Content":"Перед определением новой функции открой js консоль <code>CDT</code> и набери, например:\n<listing>\nfindCity('Stockholm');\n</listing>\nТы увидишь, что такой функции нет.\n<img src=\"/images/findCity_console.jpg\"/>\n\nДобавь в <code><script></code> функцию\n<listing>\n/**\n* Поиск города по имени в массиве cities\n* @param name - название искомого города\n*/\nfunction findCity(name) {\n  return null;\n}\n</listing>\nИ снова попробую вызов в консоли. Теперь видно, что функция есть. Хотя она и возвращает пустой массив.\nУчись тестировать js-код через консоль"},{"Id":0,"PageNumber":4,"Content":"В функции <code>findCity(name)</code> используй цикл <code>for</code>, чтобы перебрать все элементы и сравнить аргумент name с именем каждого города.\n\n<quiz>{\"type\": \"radiobutton\", \"tags\": \"\", \"question\": \"Кстати, сколько городов может быть найдено по запросу?\", \"choice\": [\"Только один вариант\",\"Возможно несколько вариантов поиска\"],\"answer\":\"1\", \"explanation\": \"Конечно, возможно несколько ответов. Например,  по запросу &#034;Moscow&#034; будет два варианта поиска. Российская столица и небольшой город в Калифорнии.\"}</quiz>"},{"Id":0,"PageNumber":5,"Content":"И последняя функция <code>show(latitude, longitude)</code> передвигает указатель в точку на карте.\nУверен, ты помнишь как из javascript устанавливать css-свойства. Например:\n<listing>\npointer.style.top = x + 'px';\n</listing>\nНужно перевести географические координаты в координаты на карте, чтобы переместить <code>div</code> на нужное место с помощь <code>left</code> и <code>top</code>.\nНадо ввести переменный mapWidth и mapHeight для удобства расчетов координат."},{"Id":0,"PageNumber":6,"Content":"Подсказка по функции перевода координат из широты и долготы в координаты экрана <code>show(latitude, longitude)</code>.\n<listing collapsed=\"true\">\n/**\n         * @param latitude - широта [-90..90] (будем переводить в y на карте)\n         * @param longitude - долгота [-180..180] (будем переводить в x на карте)\n         */\n        function show(latitude, longitude) {\n            var x, y = 0;\n            latitude+=90;\n            y = mapHeight-(latitude*mapHeight)/180;\n\n            longitude+=180;\n            x = (longitude*mapWidth)/360;\n            pointer.style.top = y + 'px';\n            pointer.style.left = x + 'px';\n        }\n</listing>"},{"Id":0,"PageNumber":7,"Content":"Не все элементы пользовательского интерфейса еще функционируют как надо. Займемся ими в следующей задаче."}]},{"LessonNumber":8,"Title":"Доделываем UI","Type":"","Tags":"javascript[25],html[4]","Tech":"","Experience":"30","DescriptionText":"","Comment":"","Description":[{"Id":0,"PageNumber":1,"Content":"Описание задачи:\n- Сделать поиск по клику на кнопку.\n- Если результатов поиска несколько, то показывай первый найденный\n- Выбор нескольких вариантов поиска\n- Скрытие и показ выбора нескольких вариантов\n- Скрытие указателя, если ничего не найдено.\n\nТебе потребуется:\n- javascript события\n- onchange\n- onselect\n- javascript innerHTML\n- javascript style\n- document.createElement\n- appendChild"},{"Id":0,"PageNumber":3,"Content":"В результате указатель должен по нажатию на кнопку становиться в искомый город. А в поле select появляться альтернатива выбора.\n<img src=\"/images/showresult.jpg\"/>"}],"Tutorial":[{"PageNumber":1,"Content":""}],"Job":[{"Id":0,"PageNumber":1,"Content":"Рекомендую сохранить в переменные ссылку на поле ввода <code>input</code> и компонент выбора <code>select</code>, чтобы не делать каждый раз поиск их с помощью <code>getElementById</code>\nНапример:\n<listing>\nmyElement = document.getElementById('myElementId');\n</listing>\nЕще может быть полезна:\n<code>searchResult</code> - переменная куда будут сохраняться результаты поиска."},{"Id":0,"PageNumber":2,"Content":"Здесь начнется самое интересное. Это основная функция, которая свяжет воедино весь функционал приложения.\nВведи событие <code>onclick</code> на кнопку поиска, которое свяжи с функцией, например:\n<listing collapsed=\"true\">\n/**\n         * Поиск и отображени результатов на карте\n         */\n        function onShowClick() {\n            // получить значение из value\n            //TODO\n            // очищаем select\n            select.innerHTML = '';\n            // ищем и сохраняем результат, он еще может понадобится\n            //TODO searchResult = ...\n            if (searchResult.length > 0) {\n                // есть по крайней мере один результат\n                //TODO show(...);\n                if (searchResult.length > 1) {\n                    // есть несколько вариантов - показать список с выбором\n                    //TODO\n                    // создаем выбор внутри элемента select для каждого найденного результата\n                    for (var i = 0; i < searchResult.length; i++) {\n                        //TODO\n                    }\n                }\n                else {\n                    // скрыть список с выбором, так как результат один\n                    //TODO\n                }\n            }\n            else {\n                // ничего не найдено\n                //TODO\n            }\n        }\n}\n</listing>\n\nТакие шаблоны или заготовки можно часто встретить. Разработчики часто пишут <code>TODO</code> для задач, которые надо сделать в будущем."},{"Id":0,"PageNumber":3,"Content":"В результате указатель должен по нажатию на кнопку становиться в искомый город. А в поле select появляться альтернатива выбора. Если она есть, конечно.\n<img src=\"/images/showresult.jpg\"/>\nЕсли результат поиска один единственный, то элемент <code>select</code> скрывается"},{"Id":0,"PageNumber":4,"Content":"Введи событие onchange для элемента <code>select</code> например:\n<listing>\n<select id=\"id-select_city\" class=\"city_select\" style=\"display: none;\" onchange=\"onSelectChange()\">\n</listing>\nФункция отвечает за смену и показ альтернативного варианта поиска.\nВнутри <code>onSelectChange</code> будет всего одна строчка кода, подумай какая."},{"Id":0,"PageNumber":5,"Content":"Весь основной функционал у нас готов. Осталось не так много. Вперед!"}]},{"LessonNumber":9,"Title":"Новый указатель","Type":"","Tags":"html[6],css[4],javascript[8]","Tech":"","Experience":"16","DescriptionText":"","Comment":"","Description":[{"Id":0,"PageNumber":1,"Content":"\"На закуску\" потребуется сменить указатель на более красивый. Дизайнер наконец-то нарисовал :)\n\nОбзор:\n- Добавить новый указатель\n- Обеспечить его позиционирование, чтобы он точно указывал на искомую точку.\n\nРесурсы:\n<img src=\"/images/pin.png\"/>\n<a href=\"/images/pin.png\">Скачать</a>"},{"Id":0,"PageNumber":2,"Content":"Если ты обратил внимание, то требуется позиционировать новый указатель другим способом. То есть переписать формулу, чтобы нижний выступ точно указывал на искомое место.\n\nРекомендую тестировать выравнивание на какой-то определенной, известной точке. Например в координатах 0-широты и 0-долготы.\n<img src=\"/images/location00.jpg\"/>\n\nДобейся того, чтобы новый указатель кончиком указывал именно туда при вызове js-функции:\n<listing>\nshow(0,0);\n</listing>"}],"Tutorial":[{"PageNumber":1,"Content":""}],"Job":[{"Id":0,"PageNumber":1,"Content":"Рекомендую вынести в javascript код размеры этого самого указателя.\nНапример, ввести переменные pointerWidth = 30, pointerHeight = 38;"},{"Id":0,"PageNumber":2,"Content":"Это была последняя фича в этом проекте. Надеюсь, она не вызвала у тебя особых трудностей. Если что - пиши, спрашивай!"}]},{"LessonNumber":10,"Title":"Завершение","Type":"","Tags":"html[4],css[5],javascript[3]","Tech":"","Experience":"4","DescriptionText":"","Comment":"","Description":[{"Id":0,"PageNumber":1,"Content":"<author role=\"mentor\">\nДавай подумаем как можно было бы улучшить проект на будущее?\n</author>"},{"Id":0,"PageNumber":2,"Content":"<quiz>{\"type\": \"radiobutton\", \"tags\": \"\", \"question\": \"Заказчик захочет изменить изображение карты, что ты скажешь?\", \"choice\": [\"Можно вставить произвольное изображение, нет проблем\",\"Надо использовать сильно похожую карту\",\"Никак не получится\"],\"answer\":\"1\", \"explanation\": \"Просто заменить изображение на любое другое нельзя. В идеале, если дизайнер поработает с существующей картой, улучшит её, сохранив расположение континентов. Чтобы изменить карту на другую проекцию, придется менять алгоритм определения позиции и серьезно.\"}</quiz>"},{"Id":0,"PageNumber":3,"Content":"<quiz>{\"type\": \"radiobutton\", \"tags\": \"\", \"question\": \"Заказчик хочет, чтобы указатель перемещался анимировано. Что ты сделаешь?\", \"choice\": [\"Двигать с помощью javascript, меняя left и top\",\"Добавить css стиль для указателя transform: moving;\",\"Добавить стиль для указателя transition: all 1s ease;\"],\"answer\":\"2\", \"explanation\": \"Конечно же, свойство transition отвечает за плавное изменение свойств. Использование transition: all 1s ease; позволит плавно изменять свойства, в частноcти left и top\"}</quiz>"},{"Id":0,"PageNumber":4,"Content":"Пожалуйста, заполни анкету. Это займет примерно 1 минуту.\n<a href=\"https://docs.google.com/forms/d/1ijOU07JXen5lAAcytoc2x5QHjt-3sS1c9KZM1_xfzmo/viewform\" target=\"_blank\">Анкета</a>"},{"Id":0,"PageNumber":5,"Content":"Поздравляю!\nТы сегодня снова стал еще немного круче и сделал непростой проект с использованием javasciprt."}],"Tutorial":[{"PageNumber":1,"Content":""}],"Job":[{"PageNumber":1,"Content":""}]}]}